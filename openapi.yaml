openapi: 3.0.0
info:
  title: Booking.com API
  description: API for managing accommodations, rooms, bookings, users, and sessions.
  version: 1.0.0
servers:
  - url: /
    description: Local development server

tags:
  - name: Accommodations
    description: Operations related to accommodations (hotels, apartments, etc.)
  - name: Rooms
    description: Operations related to rooms
  - name: Bookings
    description: Operations related to bookings
  - name: Users
    description: Operations related to user management
  - name: Sessions
    description: User session management

paths:
  /accommodations:
    get:
      tags:
        - Accommodations
      summary: Get all accommodations
      responses:
        '200':
          description: List of accommodations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Accommodation'
    post:
      tags:
        - Accommodations
      summary: Add a new accommodation
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Accommodation'
            example:
              name: "Grand Hotel"
              city: "Paris"
              address: "123 Champs-Élysées"
              rating: 4.5
      responses:
        '201':
          description: Accommodation successfully created

  /accommodations/{id}:
    patch:
      tags:
        - Accommodations
      summary: Update an accommodation
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          description: Accommodation ID
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Accommodation'
            example:
              name: "Grand Hotel Luxe"
              rating: 4.8
      responses:
        '200':
          description: Accommodation successfully updated
    delete:
      tags:
        - Accommodations
      summary: Delete an accommodation
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          description: Accommodation ID
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Accommodation successfully deleted

  /rooms:
    get:
      tags:
        - Rooms
      summary: Get all rooms
      responses:
        '200':
          description: List of rooms
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Room'
    post:
      tags:
        - Rooms
      summary: Add a new room
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Room'
            example:
              accommodationId: 1
              type: "Deluxe Suite"
              price: 299.99
      responses:
        '201':
          description: Room successfully created

  /rooms/{id}:
    patch:
      tags:
        - Rooms
      summary: Update a room
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          description: Room ID
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Room'
            example:
              type: "Premium Suite"
              price: 349.99
      responses:
        '200':
          description: Room successfully updated
    delete:
      tags:
        - Rooms
      summary: Delete a room
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          description: Room ID
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Room successfully deleted

  /bookings:
    get:
      tags:
        - Bookings
      summary: Get all bookings
      responses:
        '200':
          description: List of bookings
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Booking'
    post:
      tags:
        - Bookings
      summary: Create a booking
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Booking'
            example:
              accommodationId: 1
              userName: "John Doe"
              checkInDate: "2025-03-15"
              checkOutDate: "2025-03-20"
      responses:
        '201':
          description: Booking successfully created

  /bookings/{id}:
    patch:
      tags:
        - Bookings
      summary: Update a booking
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          description: Booking ID
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Booking'
            example:
              checkInDate: "2025-03-16"
              checkOutDate: "2025-03-21"
      responses:
        '200':
          description: Booking successfully updated
    delete:
      tags:
        - Bookings
      summary: Delete a booking
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          description: Booking ID
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Booking successfully deleted

  /users:
    get:
      tags:
        - Users
      summary: Get all users
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      tags:
        - Users
      summary: Register a new user
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
            example:
              email: "john@example.com"
              name: "John Doe"
              password: "securepassword123"
      responses:
        '201':
          description: User successfully created

  /users/{id}:
    patch:
      tags:
        - Users
      summary: Update a user
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          description: User ID
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
            example:
              name: "John Smith"
              email: "john.smith@example.com"
      responses:
        '200':
          description: User successfully updated
    delete:
      tags:
        - Users
      summary: Delete a user
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          description: User ID
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: User successfully deleted

  /sessions:
    post:
      tags:
        - Sessions
      summary: User login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
            example:
              email: "john@example.com"
              password: "securepassword123"
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Accommodation:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        city:
          type: string
        address:
          type: string
        rating:
          type: number

    Room:
      type: object
      properties:
        id:
          type: integer
        accommodationId:
          type: integer
        type:
          type: string
        price:
          type: number

    Booking:
      type: object
      properties:
        id:
          type: integer
        accommodationId:
          type: integer
        userName:
          type: string
        checkInDate:
          type: string
        checkOutDate:
          type: string

    User:
      type: object
      properties:
        id:
          type: integer
        email:
          type: string
        name:
          type: string